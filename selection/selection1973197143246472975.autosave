static final int X_CO = 0;
static final int Y_CO = 1;

static final int NOW_CHOOSE = 0;
static final int X_LENGTH   = 650;
static final int MOVE       = 5;
static final float [] before_last = {430, 40, X_LENGTH, 70};
static final float [] last        = {360, 140, X_LENGTH, 80};
static final float [] now         = {300, 250, X_LENGTH, 90};
static final float [] next	 	  = {360, 370, X_LENGTH, 80};
static final float [] after_next  = {430, 480, X_LENGTH, 70};

static final int FIRST   = 0;
static final int SECOND  = 1;
static final int THIRD   = 2;
static final int FOURTH  = 3;
static final int FIFTH   = 4;

static final float [] nowTolast    = {MOVE, map(MOVE, 0, last[0]-now[0], 0, now[1]-last[1]), 0, map(MOVE, 0, last[0]-now[0], 0, now[3]-last[3])};
static final float [] lastTobefore = {MOVE, map(MOVE, 0, before_last[0]-last[0], 0, last[1]- before_last[1]), 0, map(MOVE, 0, before_last[0]-last[0], 0, last[3]-before_last[3])};

class Selection
{
	int r, g, b;
	float [] first;
	float [] second;
	float [] third;
	float [] fourth;
	float [] fifth;

	Selection()
	{
		r = 0;
		g = 0;
		b = 0;
		first     = new float[5];
		second    = new float[5];
		third     = new float[5];
		fourth    = new float[5];
		fifth     = new float[5];
		first     = {430, 40, X_LENGTH, 70, FIRST};
		second    = {360, 140, X_LENGTH, 80, SECOND};
		third     = {300, 250, X_LENGTH, 90, THIRD};
		fourth    = {360, 370, X_LENGTH, 80, FOURTH};
		fifth     = {430, 480, X_LENGTH, 70, FIFTH};
		// first[4]  = FIRST;
		// second[4] = SECOND;
		// third[4]  = THIRD;
		// fourth[4] = FOURTH;
		// fifth[4]  = FIFTH;

	}

	void backgroundColor()
	{
		background(r, g, b);
	}

	// void draw()
	// {

	// }

	// void update()
	// {

	// }

	void test()
	{
		rect(before_last[0], before_last[1], before_last[2], before_last[3]);
		rect(last[0], last[1], last[2], last[3]);
		rect(now[X_CO], now[Y_CO], now[2], now[3]); //main
		//rect(next[0], next[1], next[2], next[3]);
		//rect(after_next[0], after_next[1], after_next[2], after_next[3]);
	}

	void update()
	{
		switch((int)third[4])
		{
			case FIRST:
			break;
			case SECOND:
				third[X_CO] += lastTobefore[0];
				third[X_CO] -= lastTobefore[1];
				third[3]    -= lastTobefore[3];
			break;
			case THIRD:
				third[X_CO] += nowTolast[0];
				third[Y_CO] -= nowTolast[1];
				third[3]    -= nowTolast[3];
				if(third[X_CO] == last[X_CO])
				{
					third[4] = SECOND;
				}
			break;
			case FOURTH:
			break;
			case FIFTH:
			break;
		}
		// third[X_CO] += nowTolast[0];
		// third[Y_CO] -= nowTolast[1];
		// third[3]    -= nowTolast[3];
	}

	void draw()
	{
		rect(third[X_CO], third[Y_CO], X_LENGTH, third[3]);
	}

}

Selection selection;


//////////for testing////////////
void setup()
{
	frameRate(1);
	selection = new Selection();
	size(800, 600);
	selection.backgroundColor();
	selection.test();
	//selection.update();
	println(nowTolast[2]);
}

void draw()
{
	selection.backgroundColor();
	selection.update();
	selection.draw();
}



//////////for testing////////////
